// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
}

model Collection {
  id            String    @id @default(cuid())
  userId        String
  title         String    @db.Text
  description   String?   @db.Text
  imageUrl      String?   @db.Text
  isPublished   Boolean   @default(false)

  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  attachments   Attachment[]
  flashcards    Flashcard[]
  
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([categoryId], name: "userId")
}

model Attachment {
  id            String    @id @default(cuid())
  name          String   
  url           String    @db.Text

  collectionId  String
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([collectionId])
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  collections   Collection[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

model Flashcard {
  id            String    @id @default(cuid())
  front         String    @db.Text
  back          String    @db.Text
  image         String?   @db.Text
  position      Int
  isPublished   Boolean   @default(false)


  collectionId  String
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([collectionId])
}

model StripeCustomer {
  id            String    @id @default(cuid())
  userId        String    @unique
  stripeId      String    @unique
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}